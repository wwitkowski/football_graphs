from collections import defaultdict
from collections.abc import Callable, Generator
from typing import Any

from data_backend.models import APIRequest, APIResponse

ParserFunc = Callable[[str], tuple[dict[str, Any], str]]
RequestGeneratorFunc = Callable[[str], list[APIRequest]]


class ResponseHandler:
    """
    Handles API responses by delegating parsing and generating new requests.

    This class allows registering parsers for different request types as well as
    request generators that may produce follow-up requests based on responses.
    """

    def __init__(self) -> None:
        """
        Initialize the ResponseHandler.

        Attributes
        ----------
        parsers : dict of (str, HandlerFunc)
            Mapping from request type to parser function.
        generators : dict of (str, list of RequestGeneratorFunc)
            Mapping from request type to a list of generator functions that can
            create new requests from the response body.
        _new_requests : list of APIRequest
            Queue of new requests generated from responses.
        """
        self.parsers: dict[str, ParserFunc] = {}
        self.generators: dict[str, list[RequestGeneratorFunc]] = defaultdict(list)
        self._new_requests: list[APIRequest] = []

    def add_parser(
        self, request_type: str, handler_func: ParserFunc
    ) -> "ResponseHandler":
        """
        Register a parser for a specific request type.

        Parameters
        ----------
        request_type : str
            The type of request this parser can handle.
        handler_func : ParserFunc
            A function that takes the response body as input and returns
            parsed data as a dictionary and an identifier (e.g., version).

        Returns
        -------
        ResponseHandler
            The current instance, to allow method chaining.
        """
        self.parsers[request_type] = handler_func
        return self

    def add_request_generator(
        self, request_type: str, handler_func: RequestGeneratorFunc
    ) -> "ResponseHandler":
        """
        Register a request generator for a specific request type.

        Parameters
        ----------
        request_type : str
            The type of request this generator applies to.
        handler_func : RequestGeneratorFunc
            A function that takes the response body and returns
            a list of new requests (or an empty list).

        Returns
        -------
        ResponseHandler
            The current instance, to allow method chaining.
        """
        self.generators[request_type].append(handler_func)
        return self

    def handle(self, response: APIResponse) -> Any:
        """
        Process an API response by running request generators and parsing.

        Parameters
        ----------
        response : APIResponse
            The response object containing the request type and body.

        Returns
        -------
        Any
            The parsed output returned by the parser for this response type.

        Raises
        ------
        ValueError
            If no parser is registered for the response type.
        """
        for generator in self.generators.get(response.request.type, []):
            new_requests = generator(response.body)
            if new_requests:
                self._new_requests.extend(new_requests)
        parser = self.parsers.get(response.request.type)
        if not parser:
            raise ValueError(
                f"No parser registered for response type '{response.request.type}'"
            )
        return parser(response.body)

    def collect_new_requests(self) -> Generator[APIRequest, None, None]:
        """
        Yield and remove new requests generated from responses.

        Yields
        ------
        APIRequest
            A new request object previously generated by request generators.
        """
        while self._new_requests:
            yield self._new_requests.pop(0)
